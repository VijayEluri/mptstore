                   ------------------------------------
                   Details of MPTStore Table Management
                   ------------------------------------

Introduction
------------

MPTStore automatically creates tables for predicates as-needed during adds.

If a triple is being added, but the predicate has not been seen before,
the following must occur prior to the actual INSERT:

- Add a new mapping to the tMap table via an INSERT statement.
- Add a new table for the predicate, via a CREATE TABLE statement.


Transaction Issues
------------------

Table mapping/creation cannot occur within the same transaction as an add.

Why?

Initially, it would seem like a good idea to set up transaction boundaries 
around the entire set of operations in order to make it atomic.

However:

1) Mixing DDL and DML in a single transaction is not a widely supported 
feature among RDBMS vendors.  For example, MySQL and Oracle don't
support it, but Postgres does.

2) Even if the database supported it, wrapping all these operations in a
transaction would introduce problems with concurrent writes. Consider the 
following scenario:

  Two concurrent writers each add a triple employing the same new predicate.

  Case A) If transaction isolation is high (SERIALIZABLE):

     If successful, both writers will have put their triples in
     separate, new tables.  This is an inconsistent state.

  Case B) If transaction isolation is low (READ_UNCOMMITTED):

     If the first transaction that creates the predicate table is
     rolled back, the second transaction would fail as a result.


Strategy
--------

The TableManager keeps the table map in memory.  Only when it changes is
it flushed to disk.

When a thread is doing an add and a new predicate needs to be created:

the thread gets a write lock on the map.
a connection is borrowed, and left in autocommit=true mode, on which:
  the new row is added to tMap
  the new table is created.
the memory map is updated.
the thread releases the write lock on the map.
the add continues as normal.

